// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  email         String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role           @default(BASICUSER)
  apiKey        String         @unique
  QRRequests    QRRequest[]
  subscriptions Subscription[]
  AccessLog     AccessLog[]
  ErrorLog      ErrorLog[]
}

model QRRequest {
  id              String          @id @default(dbgenerated("gen_random_uuid()"))
  createdAt       DateTime        @default(now())
  contentType     ContentType
  content         String
  size            Int // Assuming this is the dimension of the QR code, e.g., 300 for 300x300
  color           String // Storing this as hex by default
  correctionLevel CorrectionLevel
  format          Format
  userId          String
  User            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Subscription {
  id        String             @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime           @default(now())
  userId    String
  type      SubscriptionType
  status    SubscriptionStatus
  User      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AccessLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  userId     String
  accessedAt DateTime @default(now())
  ipAddress  String?
  userAgent  String?
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, accessedAt])
}

model ErrorLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  occurredAt DateTime @default(now())
  message    String
  userId     String?
  endpoint   String
  User       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, occurredAt])
}

enum Role {
  ADMIN
  PREMIUMUSER
  BASICUSER
}

enum ContentType {
  URL
  TEXT
  CONTACT
}

enum CorrectionLevel {
  L
  M
  Q
  H
}

enum Format {
  PNG
  SVG
}

enum SubscriptionType {
  MONTHLY
  YEARLY
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

